<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 py-16 px-4 sm:px-6 lg:px-8">
  <div class="max-w-3xl mx-auto">
    <div class="bg-white rounded-lg shadow-sm p-8">
      <%= form_with(model: email_template, class: "contents") do |form| %>
        <% if email_template.errors.any? %>
          <div id="error_explanation" class="bg-red-50 text-red-500 px-3 py-2 font-medium rounded-lg mb-6">
            <h2><%= pluralize(email_template.errors.count, "error") %> prohibited this email_template from being saved:</h2>

            <ul class="list-disc pl-5 mt-2">
              <% email_template.errors.each do |error| %>
                <li><%= error.full_message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <div class="mb-6">
          <%= form.label :template_name, class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.text_field :template_name, class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
        </div>

        <div class="mb-6">
          <%= form.label :title, class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.text_field :title, class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
        </div>

        <div class="mb-6">
          <%= form.label :body, class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.text_area :body, rows: 4, class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
        </div>

        <div class="mb-6">
          <h3 class="text-sm font-medium text-gray-700 mb-2">Available Variables</h3>
          <div class="flex gap-2">
            <button type="button" 
                    class="variable-button px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50"
                    data-variable="subscriber_name">
              Subscriber Name
            </button>
            <button type="button" 
                    class="variable-button px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50"
                    data-variable="email_body">
              Email Body
            </button>
          </div>
        </div>

        <div class="flex justify-end">
          <%= form.submit class: "inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  function initializeVariableButtons() {
    // First, remove existing listeners by cloning and replacing elements
    const variableButtons = document.querySelectorAll(".variable-button");
    const inputs = document.querySelectorAll("#email_template_title, #email_template_body");
    
    variableButtons.forEach(button => {
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
    });

    inputs.forEach(input => {
      const newInput = input.cloneNode(true);
      input.parentNode.replaceChild(newInput, input);
    });

    // Now add fresh listeners
    let currentFocusedInput = null;

    document.querySelectorAll("#email_template_title, #email_template_body").forEach(input => {
      input.addEventListener("focus", function() {
        currentFocusedInput = this;
      });
    });

    document.querySelectorAll(".variable-button").forEach(button => {
      button.addEventListener("click", function() {
        if (!currentFocusedInput) return;

        const variable = this.dataset.variable;
        const template = `{{ ${variable} }}`;
        
        const start = currentFocusedInput.selectionStart;
        const end = currentFocusedInput.selectionEnd;
        
        const content = currentFocusedInput.value;
        currentFocusedInput.value = content.substring(0, start) + template + content.substring(end);
        
        const newCursorPos = start + template.length;
        currentFocusedInput.setSelectionRange(newCursorPos, newCursorPos);
        
        currentFocusedInput.focus();
      });
    });
  }

  // Initialize on first load
  initializeVariableButtons();

  // Initialize when Turbo loads a new page
  document.addEventListener("turbo:load", initializeVariableButtons);
</script>
